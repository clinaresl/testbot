****************
Intro
****************

.. index::
   single: /proc
   single: autobot
   single: testbot
   single: tb
   pair: test; specification
   single: db
   pair: database; specification
   pair: SQLite3; database
   pair: sys; variables
   pair: main; variables
   pair: data; variables
   pair: param; variables
   pair: directive; variables
   pair: file; variables
   pair: user; variables

*Testbot* is a Python package that monitors the execution of
(hopefully) any executable under OSs that provide a :file:`/proc`
filesystem ---i.e., Linux. *Testbot* is mainly intended to be used for
scientific experimentation.

It consists of two components:

1. Package :mod:`autobot`: it provides the main services for
   programmers to automate/monitor the execution of their programs.

2. Script :program:`testbot`: it uses the services provided by
   :mod:`autobot` to be run under simple scenarios.

:mod:`autobot` parses two input files:

* :file:`tb` file: it contains the description of the command line
  arguments to be passed to the executable. Every definition of a
  command line consists of a single execution of an executable (also
  generally denoted as *solver*)

* :file:`db` file: it defines the schema of all tables to be stored by
:mod:`autobot` in a sqlite3 database as a result of the
experimentation. These tables can contain a bunch of data including
data retrieved from the standard output generated by the executable or
other particular data accessed by other Python modules. In particular,
the db language recognizes the following variables:

	+ *Sys* variables: these variables are computed at every cycle
          of the execution of the solver (i.e., immediately after the
          underlying process is pinged). They are preceded by
          :const:`sys.`

	+ *Main* variables: the value of any directive passed to the
          :program:`testbot` script. They are preceded by
          :const:`main.`

	+ *Data* variables: strings (either single or doubled quoted
          just in case they contain blank characters) that are matched
          in the standard output of the process. In case they are
          found the value appearing immediately after is used as its
          value. They are preceded by :const:`data.`

        + *Param* variables (parameters): these are the flags given to
          the monitored executable. They are preceded by
          :const:`param.`

	+ *Directive* variables: the value of any directive passed to
          the executable (which are specified in the test
          specification file) identified by its position. They are
          preceded by :const:`dir.`

	+ *File* variables: strings (either single or doubled quoted
          just in case they contain blank characters) that name
          variables whose values are the contents of the specified
          file. They are preceded by :const:`file.`

        + *User* variables: strings (either single or doubled quoted
          just in case they contain blank characters). These are
          defined and handled by the user. They are preceded by
          :const:`user.`

	+ *Regexp* variables (regular expressions): these are regular
          expressions that define an arbitrary number of groups with
          the format :const:`(?P<group-name>...)` where the ellipsis
          contain valid regular expressions. They are preceded by the
          name given to the regular expression.

:mod:`autobot` accepts an arbitrary selection of *solvers* specified
with regular expressions. This is useful to compare algorithms. Every
executable generates a different sqlite3 database that can be used
later on to access data or to plot figures directly (e.g., using
pipelines in gnuplot).

:mod:`testbot` might suffice for experiments simple enough. For other
purposes, :mod:`autobot` provides additional services for automating
the experimentation through a well-defined API.


#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# parsetools.py
# Description: default argument parser and attached actions of the autobot
# -----------------------------------------------------------------------------
#
# Started on  <Sat Dec 14 00:04:20 2013 Carlos Linares Lopez>
# Last update <domingo, 26 abril 2015 17:12:44 Carlos Linares Lopez (clinares)>
# -----------------------------------------------------------------------------
#
# $Id::                                                                      $
# $Date::                                                                    $
# $Revision::                                                                $
# -----------------------------------------------------------------------------
#
# Made by Carlos Linares Lopez
# Login   <clinares@atlas>
#

# -----------------------------------------------------------------------------
#     This file is part of testbot
#
#     testbot is free software: you can redistribute it and/or modify it under
#     the terms of the GNU General Public License as published by the Free
#     Software Foundation, either version 3 of the License, or (at your option)
#     any later version.
#
#     testbot is distributed in the hope that it will be useful, but WITHOUT ANY
#     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#     FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
#     details.
#
#     You should have received a copy of the GNU General Public License along
#     with testbot.  If not, see <http://www.gnu.org/licenses/>.
#
#     Copyright Carlos Linares Lopez, 2014
# -----------------------------------------------------------------------------

"""
default argument parser and attached actions of the autobot
"""

__version__  = '1.0'
__revision__ = '$Revision$'
__date__     = '$Date:$'


# imports
# -----------------------------------------------------------------------------
import argparse                 # argument parsing
import os                       # os services
import sys                      # system accessing

import dbtools
import tsttools


# -----------------------------------------------------------------------------
# ShowPlaceHoldersTests
#
# shows a comprehensive list of the available place holders for making
# substitutions in the output files generated by every solver.
# -----------------------------------------------------------------------------
class ShowPlaceHoldersTests (argparse.Action):
    """
    shows a comprehensive list of the available place holders for
    making substitutions in the output files generated by every
    solver.
    """

    def __call__(self, parser, namespace, values, option_string=None):
        print("""
 In general, any variable used in the main namespace can be used as a
 placeholder. The following are a subset which are expected to be particularly
 useful:

 placeholder   description
 %s+%s""" % ('-'*12, '-'*65))

        print(""" $execname   | name of the solver
 $index      | index of the current test case (defined in the test file)
 $date       | current date
 $time       | current time
 $tests      | test specification file given to testbot
 $db         | database specification file given to testbot
 $bz2        | whether compression was requested or not
 $level      | level information
 $timeout    | maximum time allotted to every execution
 $memory     | maximum memory allotted to every execution
 $check      | delay between successive pings to the executable""")

        print(""" %s+%s

 The variables in the main namespace are given to the following BotActions:

    + Enter/WindUp
    + Prologue/Epilogue

 so that they can be overloaded also to inspect the value of these variables and
 others
""" % ('-'*12, '-'*65))

        # and finally exit
        sys.exit (0)


# -----------------------------------------------------------------------------
# ShowTests
#
# shows a comprehensive output of the tests definition as provided by the user
# -----------------------------------------------------------------------------
class ShowTests (argparse.Action):
    """
    shows a comprehensive output of the tests definition as provided by the user
    """

    def __call__(self, parser, namespace, values, option_string=None):

        # if no test was provided, exit with a manual error
        if not namespace.tests:
            parser.error (" no tests specified! Make sure to invoke --parse-tests *after* --test")
            sys.exit (0)

        # otherwise, process the file through the main entry point provided in
        # tsttools and exit
        print()
        print(" Contents of the test specification file:")
        print(" ----------------------------------------")
        print(sttools.TstFile (namespace.tests))

        # and finally exit
        sys.exit (0)


# -----------------------------------------------------------------------------
# ShowDatabaseSpec
#
# shows a comprehensive output of the specification of the database
# -----------------------------------------------------------------------------
class ShowDatabaseSpec (argparse.Action):
    """
    shows a comprehensive output of the specification of the database
    """

    def __call__(self, parser, namespace, values, option_string=None):

        # if no test was provided, exit with a manual error
        if not namespace.db:
            parser.error (" no database specified! Make sure to invoke --parse-db *after* --db")
            sys.exit (0)

        # otherwise, process the file through the main entry point provided in
        # dbtools and exit
        print()
        print(" Contents of the database specification file:")
        print(" --------------------------------------------")
        print(dbtools.DBFile (namespace.db))

        # and finally exit
        sys.exit (0)


# -----------------------------------------------------------------------------
# BotTestArgParser
#
# Provides an argument parser that can be reused/extended for the BotTester
# -----------------------------------------------------------------------------
class BotTestArgParser (object):
    """
    Provides an argument parser that can be reused/extended for the BotTester
    """

    def __init__ (self):
        """
        create a parser and store its contents in this instance
        """

        # initialize a parser
        self._parser = argparse.ArgumentParser (description="Automatically executes any program and records various data")

        # now, add the arguments

        # Group of mandatory arguments
        self._mandatory = self._parser.add_argument_group ("Mandatory arguments", "The following arguments are required")
        self._mandatory.add_argument ('-s', '--solver',
                                      nargs='+',
                                      required=True,
                                      help="sets the solver to use for solving all cases. It is possible to provide as many as desired")
        self._mandatory.add_argument ('-f', '--test',
                                      dest='tests',
                                      required=True,
                                      help="specification of the test cases")
        self._mandatory.add_argument ('-D', '--db',
                                      dest='db',
                                      required=True,
                                      help="specification of the database tables with the information to record")
        self._mandatory.add_argument ('-t', '--timeout',
                                      required=True,
                                      type=int,
                                      help="the maximum allowed time for solving a particular instance in seconds")
        self._mandatory.add_argument ('-m', '--memory',
                                      required=True,
                                      type=int,
                                      help="the maximum allowed (overall) memory for solving a particular instance in Gigabytes")

        # Group of optional arguments
        self._optional = self._parser.add_argument_group ('Optional', 'The following arguments are optional')
        self._optional.add_argument ('-o', '--output',
                                     default='$index',
                                     help="prefix of the output files generated by the solver. Placeholders can be used. For a description of the available placeholders type '--show-placeholders'. By default '$index'")
        self._optional.add_argument ('-c', '--check',
                                     default=5,
                                     type=float,
                                     help='delay in seconds (which can be given as a floating-point number) between successive pings to the solver. By default, 5 seconds')
        self._optional.add_argument ('-d', '--directory',
                                     default=os.getcwd (),
                                     help="directory where the results of the tests are stored. Relative directories are rooted in the current working directory. By default, the current working directory.")
        self._optional.add_argument ('-B','--bz2',
                                     action='store_true',
                                     help="if enabled, the (standard and error) output are compressed using bz2. By default, disabled")

        # Group of logging services
        self._logging = self._parser.add_argument_group ('Logging', 'The following arguments specify various logging settings')
        self._logging.add_argument ('-l', '--logfile',
                                    help = "name of the logfile where the output of the whole process is recorded. It is left at the current working directory")
        self._logging.add_argument ('-L', '--level',
                                    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                                    default='INFO',
                                    help="level of log messages. Messages of the same level or above are shown. By default, INFO, i.e., all messages are shown")

        # Group of miscellaneous arguments
        self._misc = self._parser.add_argument_group ('Miscellaneous')
        self._misc.add_argument ('-S','--show-placeholders',
                                 nargs=0,
                                 action=ShowPlaceHoldersTests,
                                 help='shows a comprehensive list of the available placeholders for making substitutions in the output files generated by every solver')
        self._misc.add_argument ('-p', '--parse-tests',
                                 nargs=0,
                                 action=ShowTests,
                                 help="processes the test file, shows the resulting definitions and exits")
        self._misc.add_argument ('-b', '--parse-db',
                                 nargs=0,
                                 action=ShowDatabaseSpec,
                                 help="processes the database specification file, shows the resulting definitions and exits")
        self._misc.add_argument ('-q', '--quiet',
                                 action='store_true',
                                 help="suppress headers")
        self._misc.add_argument ('-V', '--version',
                                 action='version',
                                 version=" %s %s %s %s" % (sys.argv [0], __version__, __revision__[1:-1], __date__[1:-1]),
                                 help="output version information and exit")

    # -----------------------------------------------------------------------------
    # parse_args
    #
    # just parse the arguments with this argument parser
    # -----------------------------------------------------------------------------
    def parse_args (self):
        """
        just parse the arguments with this argument parser
        """

        return self._parser.parse_args ()


# -----------------------------------------------------------------------------
# CondorArgParser
#
# Provides an argument parser that can be reused/extended for Condorize
# -----------------------------------------------------------------------------
class CondorArgParser ( BotTestArgParser ):
    """
    Provides an argument parser that can be reused/extended for Condorize
    """

    def __init__ (self):
        """
        create a parser and store its contents in this instance
        """
        # invoke the constructor of the base class so that all the parsing
        # options for testbot are available here as well
        super(CondorArgParser, self).__init__()

        # Group of optional arguments
        self._condor = self._parser.add_argument_group ('Condor', 'The following arguments are related to HTCondor and they are all optional')

        
        # and now add new optional arguments
        self._condor.add_argument('-J', '--job-name',
                                  type=str,
                                  help='sets the condor job name as shown in the condor queue')
        self._condor.add_argument('-U', '--no-nice-user',
                                  dest='nonice',
                                  action='store_true',
                                  help="runs the condor job as a no nice user, hence getting additional privileges")
        self._condor.add_argument('-E', '--notify',
                                  default=None,
                                  help='if given condor notifies the given e-mail address upon termination')
        self._condor.add_argument('-C', '--copy-files',
                                  action='store_true',
                                  help="in case testbot is not available in the pool machines, copy-files distributes it automatically")
        self._condor.add_argument('-I', '--transfer-input-files',
                                  nargs='*',
                                  default=[],
                                  help='if any files/directories are given here they are then added to transfer_input_files. There is no need to select here files/directories referred to with other directives')
        self._condor.add_argument('-O', '--transfer-output-files',
                                  nargs='*',
                                  default=[],
                                  help='if any files/directories are given here they are then added to transfer_output_files. There is no need to select here files/directories referred to with other directives')
        self._condor.add_argument('-R', '--submit',
                                  action='store_true',
                                  help='if given, this script also submits the newly created condor job to the condor queue. It generates two files named after the job name and suffixes ".log" and ".err" that show the standard output and error respectively')
        

# -----------------------------------------------------------------------------
# ShowPlaceHoldersParser
#
# shows a comprehensive list of the available place holders for making
# substitutions in the text files as they are copied to the results/
# directory.
# -----------------------------------------------------------------------------
class ShowPlaceHoldersParser (argparse.Action):
    """
    shows a comprehensive list of the available place holders for making
    substitutions in the text files as they are copied to the results/
    directory.
    BotTester
    """

    def __call__(self, parser, namespace, values, option_string=None):
        print("""
 In general, any variable used in the main namespace can be used as a
 placeholder. The following are a subset which are expected to be particularly
 useful:

 placeholder   description
 %s+%s""" % ('-'*12, '-'*65))

        print(""" $name       | name of the parsed file
 $index      | index of the current test case (defined in the test file)
 $date       | current date
 $time       | current time
 $db         | database specification file given to parsebot
 $level      | level information""")

        print(""" %s+%s

 The variables in the main namespace are given to the following BotActions:

    + Enter/WindUp
    + Prologue/Epilogue

 so that they can be overloaded also to inspect the value of these variables and
 others
""" % ('-'*12, '-'*65))

        # and finally exit
        sys.exit (0)


# -----------------------------------------------------------------------------
# BotParseArgParser
#
# Provides an argument parser that can be reused/extended for the BotParser
# -----------------------------------------------------------------------------
class BotParseArgParser ():
    """
    Provides an argument parser that can be reused/extended for the BotParser
    """

    def __init__ (self):
        """
        create a parser and store its contents in this instance
        """

        self._parser = argparse.ArgumentParser (description="Automatically parses the contents of the given files and records various data. Arguments are processed in the same order they are provided")

        # now, add the arguments

        # Group of mandatory arguments
        self._mandatory = self._parser.add_argument_group ("Mandatory arguments", "The following arguments are required")
        self._mandatory.add_argument ('-f', '--file',
                                      nargs='+',
                                      required=True,
                                      help="file(s) to parse")
        self._mandatory.add_argument ('-D', '--dbspec',
                                      dest='db',
                                      required=True,
                                      help="specification of the database tables with the information to record")

        # Group of optional arguments
        self._optional = self._parser.add_argument_group ('Optional', 'The following arguments are optional')
        self._optional.add_argument ('-N', '--dbname',
                                     dest='dbname',
                                     default='$name.db', 
                                     help="name of the database that records all results. Placeholders can be used. For a description of the available placeholders type '--show-placeholders'. By default '$name.db'")
        self._optional.add_argument ('-d', '--directory',
                                     default=os.getcwd (),
        help="directory where the results of the parsing process are stored. Relative directories are rooted in the current working directory. By default, the current working directory.")
        self._optional.add_argument ('-o', '--output',
                                     default='$name',
                                     help="text files are copied to the results/ directory. This directive allows the user to give those files specific names. Placeholders can be used. For a description of the available placeholders type '--show-placeholders'. By default '$name'")
        self._optional.add_argument ('-B','--bz2',
                                     action='store_true',
                                     help="if enabled, the parsed files are compressed using bz2. By default, disabled")

        # Group of logging services
        self._logging = self._parser.add_argument_group ('Logging', 'The following arguments specify various logging settings')
        self._logging.add_argument ('-l', '--logfile',
                                    help = "name of the logfile where the output of the whole process is recorded. It is left at the current working directory")
        self._logging.add_argument ('-L', '--level',
                                    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                                    default='INFO',
                                    help="level of log messages. Messages of the same level or above are shown. By default, INFO, i.e., all messages are shown")

        # Group of miscellaneous arguments
        self._misc = self._parser.add_argument_group ('Miscellaneous')
        self._misc.add_argument ('-S','--show-placeholders',
                                 nargs=0,
                                 action=ShowPlaceHoldersParser,
                                 help='shows a comprehensive list of the available placeholders for making substitutions in the output files generated by every solver')
        self._misc.add_argument ('-b', '--parse-db',
                                 nargs=0,
                                 action=ShowDatabaseSpec,
                                 help="processes the database specification file, shows the resulting definitions and exits")
        self._misc.add_argument ('-q', '--quiet',
                                 action='store_true',
                                 help="suppress headers")
        self._misc.add_argument ('-V', '--version',
                                 action='version',
                                 version=" %s %s %s %s" % (sys.argv [0], __version__, __revision__[1:-1], __date__[1:-1]),
                                 help="output version information and exit")

    # -----------------------------------------------------------------------------
    # parse_args
    #
    # just parse the arguments with this argument parser
    # -----------------------------------------------------------------------------
    def parse_args (self):
        """
        just parse the arguments with this argument parser
        """

        return self._parser.parse_args ()



# Local Variables:
# mode:python
# fill-column:79
# End:
